import { QuizService, QuizQuestion } from './QuizService';
import { User } from '../model/User';
import { Context } from 'telegraf';
import { ChatUtils } from '../utils/ChatUtils';

interface UserQuizSession {
    currentQuestion: QuizQuestion | null;
    usedCountryIds: Set<number>;
    totalQuestions: number;
    questionsAnswered: number;
}

export enum QuizQuestionType {
    BASE = 10,
    ALL = 193,
}

export class QuizManager {
    private userSessions = new Map<number, UserQuizSession>();
    private chatUtils = new ChatUtils();

    /** –°—Ç–∞—Ä—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    public async startQuiz(ctx: Context, type: QuizQuestionType): Promise<void> {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        this.userSessions.set(telegramId, this.createSession(type));
        await this.sendNextQuestion(telegramId, ctx);
    }

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    public async handleAnswer(ctx: Context): Promise<void> {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const session = this.userSessions.get(telegramId);
        const answer = (ctx.callbackQuery as any)?.data;

        if (!session || !session.currentQuestion || !answer) {
            ctx.answerCbQuery('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π /quiz');
            return;
        }

        const user = await this.getOrCreateUser(telegramId);
        session.questionsAnswered += 1;
        user.countOfQuestion += 1;

        if (answer === session.currentQuestion.correctOption) {
            user.score += 1;
            await ctx.reply('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
        } else {
            await ctx.reply(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ ${session.currentQuestion.correctOption}`);
        }

        await user.save();

        if (this.isQuizFinished(session)) {
            await this.finishQuiz(telegramId, ctx, user, session.totalQuestions);
        } else {
            await this.sendNextQuestion(telegramId, ctx, session);
        }

        await ctx.answerCbQuery();
    }

    /** –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    private createSession(totalQuestions: number): UserQuizSession {
        return {
            currentQuestion: null,
            usedCountryIds: new Set(),
            totalQuestions,
            questionsAnswered: 0,
        };
    }

    /** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ */
    private async sendNextQuestion(
        telegramId: number,
        ctx: Context,
        session?: UserQuizSession
    ): Promise<void> {
        const userSession = session || this.userSessions.get(telegramId);
        if (!userSession) return;

        const question = await QuizService.generateQuestion(userSession.usedCountryIds);
        userSession.currentQuestion = question;
        userSession.usedCountryIds.add(question.countryId);
        this.userSessions.set(telegramId, userSession);

        await ctx.replyWithPhoto(
            { source: question.flagPath },
            {
                caption: `–í–æ–ø—Ä–æ—Å ${userSession.questionsAnswered + 1}/${userSession.totalQuestions}: —É–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É!`,
                reply_markup: this.chatUtils.buildOptionsKeyboard(question.options),
            }
        );
    }

    /** –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ */
    private isQuizFinished(session: UserQuizSession): boolean {
        return session.questionsAnswered >= session.totalQuestions;
    }

    /** –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã */
    private async finishQuiz(
        telegramId: number,
        ctx: Context,
        user: User,
        totalQuestions: number
    ): Promise<void> {
        await ctx.telegram.sendMessage(
            telegramId,
            `üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ–π –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: ${user.score}/${totalQuestions}`
        );
        this.userSessions.delete(telegramId);
    }

    /** –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    private async getOrCreateUser(telegramId: number): Promise<User> {
        let user = await User.findOne({ where: { telegramId } });
        if (!user) user = await User.create({ telegramId });
        return user;
    }
}
